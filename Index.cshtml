@page
@model IndexModel

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Store Management</title>
    <style>
        table { width: 100%; border-collapse: collapse; margin-bottom: 20px; }
        th, td { padding: 8px; text-align: left; border: 1px solid #ddd; }
        th { background-color: #f2f2f2; }
        #modalForm { display: none; padding: 20px; border: 1px solid #ddd; background: #f9f9f9; margin-bottom: 20px; }
    </style>
</head>
<body>
    <h2>Tags</h2>
    <button id="createTagBtn">Add New Tag</button>
    <table>
        <thead>
            <tr>
                <th>Name</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var tag in Model.Tags)
            {
                <tr>
                    <td>@tag.Name</td>
                    <td>
                        <button class="editTagBtn" data-id="@tag.Id">Edit</button>
                        <button class="deleteTagBtn" data-id="@tag.Id">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <h2>Categories</h2>
    <button id="createCategoryBtn">Add New Category</button>
    <table>
        <thead>
            <tr>
                <th>Name</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var category in Model.Categories)
            {
                <tr>
                    <td>@category.Name</td>
                    <td>
                        <button class="editCategoryBtn" data-id="@category.Id">Edit</button>
                        <button class="deleteCategoryBtn" data-id="@category.Id">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <h2>Vendors</h2>
    <button id="createVendorBtn">Add New Vendor</button>
    <table>
        <thead>
            <tr>
                <th>Name</th>
                <th>Address</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var vendor in Model.Vendors)
            {
                <tr>
                    <td>@vendor.Name</td>
                    <td>@vendor.Address</td>
                    <td>
                        <button class="editVendorBtn" data-id="@vendor.Id">Edit</button>
                        <button class="deleteVendorBtn" data-id="@vendor.Id">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <div id="modalForm">
        <form id="modalFormContent">
            <input type="hidden" id="entityId" name="Id" />
            <label>Name:</label>
            <input type="text" id="entityName" name="Name" />
            <div id="vendorSpecific">
                <label>Address:</label>
                <input type="text" id="entityAddress" name="Address" />
            </div>
            <button type="submit">Save</button>
        </form>
    </div>

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script>
        $(document).ready(function () {
            function showModal(action, entity, id = null, isVendor = false) {
                $('#entityId').val(id);
                $('#modalFormContent').data('action-url', `?handler=${action}${entity}`);
                $('#vendorSpecific').toggle(isVendor);
                $('#modalForm').show();
            }

            function deleteEntity(action, entity, id) {
                if (confirm('Are you sure you want to delete this item?')) {
                    $.post(`?handler=${action}${entity}`, { id: id }, function (response) {
                        if (response.success) {
                            location.reload();
                        }
                    });
                }
            }

            $('#createTagBtn').click(function () { showModal('Create', 'Tag'); });
            $('.editTagBtn').click(function () { showModal('Edit', 'Tag', $(this).data('id')); });
            $('.deleteTagBtn').click(function () { deleteEntity('Delete', 'Tag', $(this).data('id')); });

            $('#createCategoryBtn').click(function () { showModal('Create', 'Category'); });
            $('.editCategoryBtn').click(function () { showModal('Edit', 'Category', $(this).data('id')); });
            $('.deleteCategoryBtn').click(function () { deleteEntity('Delete', 'Category', $(this).data('id')); });

            $('#createVendorBtn').click(function () { showModal('Create', 'Vendor', null, true); });
            $('.editVendorBtn').click(function () { showModal('Edit', 'Vendor', $(this).data('id'), true); });
            $('.deleteVendorBtn').click(function () { deleteEntity('Delete', 'Vendor', $(this).data('id')); });

            $('#modalFormContent').submit(function (e) {
                e.preventDefault();
                var formData = $(this).serialize();
                var actionUrl = $(this).data('action-url');
                $.post(actionUrl, formData, function (response) {
                    if (response.success) {
                        location.reload();
                    }
                });
            });
        });
    </script>
</body>
</html>

@functions {
    public class Tag { public int Id { get; set; } public string Name { get; set; } }
    public class Category { public int Id { get; set; } public string Name { get; set; } }
    public class Vendor { public int Id { get; set; } public string Name { get; set; } public string Address { get; set; } }

    public List<Tag> Tags { get; set; } = new List<Tag>();
    public List<Category> Categories { get; set; } = new List<Category>();
    public List<Vendor> Vendors { get; set; } = new List<Vendor>();

    public void OnGet() {
        if (!Tags.Any()) {
            Tags.Add(new Tag { Id = 1, Name = "Tag1" });
            Categories.Add(new Category { Id = 1, Name = "Category1" });
            Vendors.Add(new Vendor { Id = 1, Name = "Vendor1", Address = "Address1" });
        }
    }

    public JsonResult OnPostCreateTag(Tag tag) {
        tag.Id = Tags.Any() ? Tags.Max(t => t.Id) + 1 : 1;
        Tags.Add(tag);
        return new JsonResult(new { success = true });
    }

    public JsonResult OnPostEditTag(int id, Tag updatedTag) {
        var tag = Tags.FirstOrDefault(t => t.Id == id);
        if (tag != null) {
            tag.Name = updatedTag.Name;
            return new JsonResult(new { success = true });
        }
        return new JsonResult(new { success = false });
    }

    public JsonResult OnPostDeleteTag(int id) {
        var tag = Tags.FirstOrDefault(t => t.Id == id);
        if (tag != null) {
            Tags.Remove(tag);
            return new JsonResult(new { success = true });
        }
        return new JsonResult(new { success = false });
    }

    public JsonResult OnPostCreateCategory(Category category) {
        category.Id = Categories.Any() ? Categories.Max(c => c.Id) + 1 : 1;
        Categories.Add(category);
        return new JsonResult(new { success = true });
    }

    public JsonResult OnPostEditCategory(int id, Category updatedCategory) {
        var category = Categories.FirstOrDefault(c => c.Id == id);
        if (category != null) {
            category.Name = updatedCategory.Name;
            return new JsonResult(new { success = true });
        }
        return new JsonResult(new { success = false });
    }

    public JsonResult OnPostDeleteCategory(int id) {
        var category = Categories.FirstOrDefault(c => c.Id == id);
        if (category != null) {
            Categories.Remove(category);
            return new JsonResult(new { success = true });
        }
        return new JsonResult(new { success = false });
    }

    public JsonResult OnPostCreateVendor(Vendor vendor) {
        vendor.Id = Vendors.Any() ? Vendors.Max(v => v.Id) + 1 : 1;
        Vendors.Add(vendor);
        return new JsonResult(new { success = true });
    }

    public JsonResult OnPostEditVendor(int id, Vendor updatedVendor) {
        var vendor = Vendors.FirstOrDefault(v => v.Id == id);
        if (vendor != null) {
            vendor.Name = updatedVendor.Name;
            vendor.Address = updatedVendor.Address;
            return new JsonResult(new { success = true });
        }
        return new JsonResult(new { success = false });
    }

    public JsonResult OnPostDeleteVendor(int id) {
        var vendor = Vendors.FirstOrDefault(v => v.Id == id);
        if (vendor != null) {
            Vendors.Remove(vendor);
            return new JsonResult(new { success = true });
        }
        return new JsonResult(new { success = false });
    }
}
